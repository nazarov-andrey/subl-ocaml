{
    "fileTypes": [
        "ml", 
        "mli"
    ], 
    "foldingStartMarker": "", 
    "foldingStopMarker": "", 
    "keyEquivalent": "", 
    "name": "OCaml", 
    "patterns": [
        { "include": "#comments" },
        {
            "match": "\\b('self|self|super)\\b",
            "name": "variable.language.ocaml"
        },
        {
            "match": "(value)\\s+[\\W]",
            "captures": { "1":{"name": "keyword.other.ocaml"} }
        },
        {
            "match": "\\b(value)\\s+((mutable\\s+virtual)|(virtual\\s+mutable)|mutable|virtual)\\s+([a-z_][0-9A-Za-z_']*)",
            "captures": {
                "1":{"name": "keyword.other.ocaml"},
                "2":{"name": "storage.modifier.ocaml"},
                "5":{"name":"variable.other.ocaml"}
            }
        },
        {
            "match": "\\b(method)\\s+((private\\s+virtual)|(virtual\\s+private)|private|virtual)\\s+([a-z_][0-9A-Za-z_']*)",
            "captures": {
                "1":{"name": "keyword.other.ocaml"},
                "2":{"name": "storage.modifier.ocaml"},
                "5":{"name":"entity.name.function.ocaml"}
            }
        },        
        {
            "match": "\\b(method)(\\s*!\\s*|\\s+)([a-z_][0-9A-Za-z_']*)",
            "captures": {
                "1":{"name": "keyword.other.ocaml"},
                "3":{"name":"entity.name.function.ocaml"}
            }
        },        
        {
            "match": "\\b(value)\\s+(rec\\s+)?([a-z_][0-9A-Za-z_']*)",
            "captures": {
                "1":{"name": "keyword.other.ocaml"},
                "2":{"name": "keyword.other.ocaml"},
                "3":{"name":"entity.name.function.ocaml"}
            }
        },
        {
            "match": "\\b(external)\\s+([a-z_][0-9A-Za-z_']*)",
            "captures": {
                "1":{"name": "keyword.other.ocaml"},
                "2":{"name":"entity.name.function.ocaml"}
            }
        },
        {
            "match": "`[A-Za-z_][A-Za-z0-9_']*",
            "name": "entity.name.tag.ocaml"
        },
        {
            "match": "(\\?|~)[a-z_][A-Za-z0-9_']*",
            "name": "entity.name.label.ocaml"
        },
        {
            "match": "\\b(and|as|assert|asr|begin|class|constraint|do|done|downto|else|end|exception|external|false|for|fun|function|functor|if|in|include|inherit|initializer|land|lazy|let|lor|lsl|lsr|lxor|match|method|module|mod|mutable|new|object|of|open|or|private|rec|sig|struct|then|to|true|try|type|value|val|virtual|when|while|with|not)\\b",
            "name": "keyword.other.ocaml"
        },
        {
            "match": "\\b(raise|failwith)\\b",
            "name": "support.function.ocaml"
        },
        {
            "match": "\\b(DEFINE|IFDEF|THEN|ELSE|END)\\b",
            "name": "keyword.other.preprocessor.ocaml"
        },
        {
            "match": "\\bdebug(:[A-Za-z0-9_]+)?\\b",
            "name": "keyword.other.ldebug.ocaml"
        },
        {
            "match": "\\bproftimer:[A-Za-z0-9_]+\\b",
            "name": "keyword.other.ldebug.ocaml"
        },
        {
            "match": "\\b(Some|None|True|False)\\b",
            "name": "constant.language.ocaml"
        },
        {
            "match": "\\b(string|array|option|list|int|float|bool|ref|unit)\\b",
            "name": "storage.type.ocaml"
        },       
        {
            "match": "!=|#|&|&&|'|(|)|\\*|\\+|,|-|-\\.|->|\\.|\\.\\.|:|::|:=|:>|;|;;|<|<-|=|>|>]|>}|\\?|\\?\\?|\\[|\\[<|\\[>|[\\||\\|\\]|_|`|{|{<|\\||\\|]|}|~",
            "name": "keyword.other.ocaml"
        },
        {
            "match": "(=|<|>|@|\\^|\\||&|\\+|-|\\*|/|$|%)(!|$|%|&|\\*|\\+|-|\\.|/|:|<|=|>|\\?|@|\\^|\\||~)?",
            "name": "keyword.operator.infix.ocaml"
        },
        {
            "match": "(!(!|$|%|&|\\*|\\+|-|\\.|/|:|<|=|>|\\?|@|\\^|\\||~)?)|((\\?|~)(!|$|%|&|\\*|\\+|-|\\.|/|:|<|=|>|\\?|@|\\^|\\||~)+)",
            "name": "keyword.operator.prefix.ocaml"
        },
        {
            "match": "\\b[A-Z][A-Za-z0-9_']*\\b",
            "name": "entity.name.module.ocaml"
        },
        { "include": "#integer-literal" },
        { "include": "#float-literal" },
        { "include": "#char-literal" },
        { "include": "#escape-char-literal" },
        { "include": "#string-literal" },
        { "include": "#ident" }
    ], 
    "repository": {
        "ident": {
            "match": "[a-z_][A-Za-z0-9_']*"
        },

        "comments": {
            "begin": "\\(\\*",
            "end": "\\*\\)",
            "name": "comment.block.ocaml",
            "patterns": [
                { "include":"#comments" }
            ]
        },

        "escape-sequence": {
            "match": "\\\\((\\\\|\"|'|n|t|b|r)|[0-9]{3}|x[0-9A-Fa-f]{2})",
            "name": "constant.character.escape.ocaml"
        },

        "label": {
            "match": "((~|\\?)[a-z_][A-Za-z0-9_']*)(:)",
            "name": "variable.parameter.label.ocaml",
            "captures": {
                "3": { "name":"punctuation.separator.ocaml" }
            }
        },

        "value-name": {
            "match": "([a-z_][a-z0-9_']*)|\\((!(!|$|%|&|\\*|\\+|-|\\.|/|:|<|=|>|\\?|@|\\^|\\||~)?)|((\\?|~)(!|$|%|&|\\*|\\+|-|\\.|/|:|<|=|>|\\?|@|\\^|\\||~)+)|((=|<|>|@|\\^|\\||&|\\+|-|\\*|/|$|%)(!|$|%|&|\\*|\\+|-|\\.|/|:|<|=|>|\\?|@|\\^|\\||~)?)|∣*∣=∣or∣&∣:=∣mod∣land∣lor∣lxor∣lsl∣lsr∣asr\\)",
            "name": "variable.other.ocaml"
        },

        "integer-literal": {
            "match": "-?(0(x|X)[0-9A-Fa-f_][0-9A-Fa-f_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)",
            "name": "constant.numeric.integer.ocaml"
        },

        "float-literal": {
            "match": "-?[0-9][0-9_]*(\\.[0-9_]*)?((e|E)(\\+|-)?[0-9][0-9_]*)?",
            "name": "constant.numeric.float.ocaml"
        },    

        "char-literal": {
            "match": "'.'",
            "name": "constant.character.ocaml"
        },

        "escape-char-literal":{
            "match": "'\\\\((\\\\|\"|'|n|t|b|r)|[0-9]{3}|x[0-9A-Fa-f]{2})'",
            "name": "constant.character.escape.ocaml"
        },

        "string-literal": {
            "begin": "\"",
            "end": "\"",
            "name": "string.quoted.double.ocaml",
            "patterns": [
                { "include": "#escape-sequence" },
                { "match": "." }
            ]
        },
        "constr": {
            "match":"([A-Z_][A-Za-z0-9_']*\\.)*([A-Z_][A-Za-z0-9_']*)",
            "name": "entity.constructor.ocaml"
        }
    }, 
    "scopeName": "source.ocaml", 
    "uuid": "F816FA69-6EE8-11D9-BF2D-000D93589AF6"
}